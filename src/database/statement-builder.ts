// Automatically generated by PASTA
import {
  astMapper,
  Expr,
  ExprRef,
  From,
  InsertStatement,
  Name,
  SelectedColumn,
  SelectStatement,
  Statement,
  toSql,
  UpdateStatement,
  WithStatement,
} from "https://deno.land/x/pgsql_ast_parser@11.0.0/mod.ts";
import {
  associations,
  AssociationsOf,
  ColumnNamesOf,
  ColumnsOf,
  KeysOf,
  MxNAssociation,
  NAssociation,
  TableName,
} from "./schema.ts";

type SeedBuilder = {
  statement:
    | SelectStatement
    | InsertStatement
    | UpdateStatement
    | WithStatement;
  toSql: () => string;
};

type StatementBuilder<T extends TableName> = SeedBuilder & {
  returning: (options: ColumnNamesOf<T>) => StatementBuilder<T>;
};
type InsertBuilder<T extends TableName> = StatementBuilder<T> & {
  associate: (associationMap: AssociationsOf<T>) => InsertBuilder<T>;
};
type SelectBuilder<T extends TableName> = StatementBuilder<T> & {
  where: (whereMap: ColumnsOf<T>) => SelectBuilder<T>;
  unique: (whereMap: KeysOf<T>) => SelectBuilder<T>;
};

const binaryOp = (op: string) => (left: Expr, right: Expr) =>
  (
    {
      "type": "binary",
      left,
      right,
      op,
    }
  ) as Expr;

const refExpr = (name: string) => ({ "type": "ref", name }) as Expr;

const columnRef = (table: string, name: string) =>
  ({ "type": "ref", table: { name: table }, name }) as ExprRef;

const stringExpr = (value: string) => ({ "type": "string", value }) as Expr;

const eqList = (valuesMap: Record<string, unknown>) =>
  binaryOp("=")({
    type: "list",
    expressions: Object.keys(valuesMap).map((k) => refExpr(k)),
  }, {
    type: "list",
    expressions: Object.values(valuesMap).map((v) => stringExpr(String(v))),
  }) as Expr;

function addReturning<T extends TableName>(
  builder: SeedBuilder,
): StatementBuilder<T> {
  const returningMapper = (columnNames: Name[]) =>
    astMapper((_map) => ({
      with: (t) => {
        if (t.in.type === "insert") {
          return {
            ...t,
            in: {
              ...t.in,
              returning: columnNames.map((c) => ({
                expr: { type: "ref", name: c.name },
              })),
            },
          };
        }
      },
      insert: (t) => {
        if (t.insert) {
          return {
            ...t,
            returning: columnNames.map((c) => ({
              expr: { type: "ref", name: c.name },
            })),
          };
        }
      },
    }));

  const returning = function (
    options: ColumnNamesOf<T>,
  ): StatementBuilder<T> {
    const returningColumns = options.map((c) => ({
      name: c,
    } as Name));
    const statementWithReturning = returningMapper(returningColumns)
      .statement(
        builder.statement,
      )! as InsertStatement;
    const seedBuilder = {
      statement: statementWithReturning,
      toSql: () => toSql.statement(statementWithReturning),
    };
    return addReturning(seedBuilder);
  };
  return { ...builder, returning };
}

function addAssociate<T extends TableName>(
  table: T,
  builder: StatementBuilder<T>,
): InsertBuilder<T> {
  const builderWithMxNAssociation = <T extends TableName>(
    builder: StatementBuilder<T>,
    association: MxNAssociation,
    associatedValues: Record<string, unknown>,
  ) => {
    const { fks, associativeTable } = association;
    const associativeValues = Object.keys(fks).reduce(
      (previousValue, currentValue) => {
        previousValue[currentValue] = {
          "type": "ref",
          "table": {
            "name": fks[currentValue][0],
          },
          "name": fks[currentValue][1],
        };
        return previousValue;
      },
      {} as Record<string, {
        "type": "ref";
        "table": {
          "name": string;
        };
        "name": string;
      }>,
    );
    const returningFksAssociation = Object.values(fks).filter((
      [fkTable],
    ) => (fkTable == association.table))
      .map(([_, fkColumn]) => (fkColumn));

    const targetAssociationColumns = Object.keys(
      associativeValues,
    ) as string[];

    const sourceColumns = targetAssociationColumns.map((
      k,
    ) => ({
      expr: columnRef(
        associativeValues[k].table.name,
        associativeValues[k].name,
      ),
    })) as SelectedColumn[];

    const withStatement = insertWith(
      association.table,
      insert(association.table)(
        // deno-lint-ignore no-explicit-any
        associatedValues as any,
      ).returning(
        returningFksAssociation as ColumnNamesOf<typeof association.table>,
      ),
    )(
      insertWith(table, builder)(
        insertFrom(associativeTable)(
          sourceColumns,
          // deno-lint-ignore no-explicit-any
          targetAssociationColumns as any,
        ),
      ),
    );
    return withStatement as StatementBuilder<T>;
  };

  const builderWith1xNAssociation = (
    builder: StatementBuilder<T>,
    association: NAssociation,
    associatedValues: Record<string, unknown>,
  ) => {
    const { fks, table: associedTable } = association;

    const returningFksAssociation = Object.values(fks);

    const sourceFkColumns = Object.keys(fks).map((
      k,
    ) => ({
      expr: columnRef(
        table,
        fks[k],
      ),
    })) as SelectedColumn[];

    const sourceValueColumns = Object.keys(associatedValues).map((
      k,
    ) => ({
      expr: stringExpr(
        String(associatedValues[k]),
      ),
    })) as unknown as SelectedColumn[];

    const withStatement = insertWith(
      table,
      builder.returning(
        returningFksAssociation as ColumnNamesOf<T>,
      ),
    )(
      insertFrom(associedTable)(
        [...sourceFkColumns, ...sourceValueColumns],
        // deno-lint-ignore no-explicit-any
        [...Object.keys(fks), ...Object.keys(associatedValues)] as any,
      ),
    );
    return withStatement as StatementBuilder<T>;
  };

  const associate = (associationMap: AssociationsOf<T>) => {
    const newBuilder = Object.entries(associationMap).reduce(
      (previous, [associated, associatedValues]) => {
        const association = associations[table][associated];
        const pks = association.kind === "1xN"
          ? Object.values(association.fks)
          : Object.values(association.fks).filter((
            [associatedTable, _column],
          ) => associatedTable === table).map(([_table, column]) => column);

        const returningPks = previous.returning(pks as ColumnNamesOf<T>);

        return association.kind === "1xN"
          ? builderWith1xNAssociation(
            returningPks,
            association,
            associatedValues,
          )
          : builderWithMxNAssociation(
            returningPks,
            association,
            associatedValues,
          );
      },
      builder,
    );

    return addAssociate(table, newBuilder);
  };
  return { ...builder, associate };
}

function unique(s: string[]) {
  return Object.keys(Object.fromEntries(s.map((el) => [el, null])));
}

function insertFrom<T extends TableName>(
  table: T,
): (
  sourceColumns: SelectedColumn[],
  columns: (keyof ColumnsOf<T>)[],
) => InsertBuilder<T> {
  return function (sourceColumns, columns) {
    const tables = unique(
      sourceColumns.map((
        s,
      ) => ((s.expr as ExprRef)?.table?.name)).filter((t) =>
        (t ?? "").length > 0
      ) as string[],
    );

    const from = tables.map((t) => ({
      "type": "table",
      "name": {
        "name": t,
      },
    })) as From[];

    const targetColumns = columns.map((c) => ({ name: c })) as Name[];

    const statement: InsertStatement = {
      "type": "insert",
      "into": { "name": table },
      "insert": {
        "type": "select",
        columns: Object.values(sourceColumns),
        from,
      },
      columns: targetColumns,
    };
    return addAssociate<T>(
      table,
      addReturning<T>({
        toSql: () => toSql.statement(statement),
        statement,
      }),
    );
  };
}

function insert<T extends TableName>(
  table: T,
): (
  valueMap: ColumnsOf<T>,
) => InsertBuilder<T> {
  return function (valueMap) {
    const columns = Object.keys(valueMap).map((k) => ({ name: k }));
    const values = [
      Object.values(valueMap).map((
        value,
      ) => (typeof value === "string"
        ? { value, type: "string" }
        : (typeof value === "object" && value !== null &&
            ("returnType" in value ||
              ("type" in value && value["type"] == "ref")))
        ? value
        : { value: JSON.stringify(value), type: "string" })
      ),
    ] as Expr[][];
    const statement: InsertStatement = {
      "type": "insert",
      "into": { "name": table },
      "insert": {
        "type": "values",
        values,
      },
      columns,
    };
    return addAssociate<T>(
      table,
      addReturning<T>({
        toSql: () => toSql.statement(statement),
        statement,
      }),
    );
  };
}

function upsert<T extends TableName>(table: T): (
  insertValues: ColumnsOf<T>,
  updateValues?: ColumnsOf<T>,
) => StatementBuilder<T> {
  const onConflictMapper = (conflictValues: Record<string, unknown>) =>
    astMapper((_map) => ({
      insert: (t) => {
        if (t.insert) {
          return {
            ...t,
            onConflict: {
              "do": {
                "sets": Object.keys(conflictValues).map((k) => ({
                  "column": { "name": k },
                  "value": {
                    "type": "string",
                    "value": String(conflictValues[k]),
                  },
                })),
              },
            },
          };
        }
      },
    }));

  return (insertValues, updateValues) => {
    const { statement } = insert(table)(insertValues);
    const withOnConflict = onConflictMapper(updateValues || insertValues)
      .statement(statement)! as InsertStatement;
    const seedBuilder = {
      table,
      toSql: () => toSql.statement(statement),
      statement: withOnConflict,
    };
    return addReturning(seedBuilder);
  };
}

function update<T extends TableName>(table: T): (
  keyValues: KeysOf<T>,
  setValues: ColumnsOf<T>,
) => StatementBuilder<T> {
  return (keyValues, setValues) => {
    const statement: Statement = {
      "type": "update",
      "table": { "name": table },
      "sets": Object.keys(setValues).map((k) => ({
        "column": { "name": k },
        "value": {
          "type": "string",
          "value": String((setValues as Record<string, unknown>)[k]),
        },
      })),
      "where": eqList(keyValues),
    };
    const seedBuilder = {
      table,
      statement,
      toSql: () => toSql.statement(statement),
    };
    return addReturning(seedBuilder);
  };
}

function insertWith<T1 extends TableName>(
  contextTable: T1,
  context: StatementBuilder<T1>,
) {
  return function <T2 extends TableName>(
    insert: StatementBuilder<T2>,
  ) {
    const statement: WithStatement = insert.statement.type === "with"
      ? {
        ...insert.statement,
        "bind": [...insert.statement.bind, {
          "alias": { "name": contextTable },
          "statement": context.statement,
        }],
      }
      : {
        "type": "with",
        "bind": [{
          "alias": { "name": contextTable },
          "statement": context.statement,
        }],
        "in": insert.statement,
      };
    const seedBuilder: SeedBuilder = {
      statement,
      toSql: () => toSql.statement(statement),
    };

    return addReturning<T2>(seedBuilder);
  };
}

function addSelectReturning<T extends TableName>(builder: SeedBuilder) {
  const returningMapper = (columnNames: Name[]) =>
    astMapper((_map) => ({
      selection: (s) => ({
        ...s,
        columns: columnNames.map((c) => ({
          expr: { type: "ref", name: c.name },
        })),
      }),
    }));

  const returning = function (
    options: ColumnNamesOf<T>,
  ): StatementBuilder<T> {
    const returningColumns = options.map((c) => ({
      name: c,
    } as Name));
    const statementWithReturning = returningMapper(returningColumns)
      .statement(
        builder.statement,
      )! as SelectStatement;
    const seedBuilder = {
      statement: statementWithReturning,
      toSql: () => toSql.statement(statementWithReturning),
    };
    return addSelectReturning(seedBuilder);
  };
  return { ...builder, returning };
}

function addWhere<T extends TableName>(builder: StatementBuilder<T>) {
  const whereMapper = (columns: ColumnsOf<T>) =>
    astMapper((_map) => ({
      selection: (s) => ({
        ...s,
        where: eqList(columns),
      }),
    }));

  const where = function (
    whereMap: ColumnsOf<T>,
  ): StatementBuilder<T> {
    const statementWithWhere = whereMapper(whereMap)
      .statement(
        builder.statement,
      )! as SelectStatement;
    const seedBuilder = {
      statement: statementWithWhere,
      toSql: () => toSql.statement(statementWithWhere),
    };
    return addSelectReturning(seedBuilder);
  };
  return { ...builder, where } as SelectBuilder<T>;
}

function addUnique<T extends TableName>(builder: StatementBuilder<T>) {
  const whereMapper = (columns: KeysOf<T>) =>
    astMapper((_map) => ({
      selection: (s) => ({
        ...s,
        where: eqList(columns),
      }),
    }));

  const unique = function (
    whereMap: KeysOf<T>,
  ): StatementBuilder<T> {
    const statementWithWhere = whereMapper(whereMap)
      .statement(
        builder.statement,
      )! as SelectStatement;
    const seedBuilder = {
      statement: statementWithWhere,
      toSql: () => toSql.statement(statementWithWhere),
    };
    return addSelectReturning(seedBuilder);
  };
  return { ...builder, unique } as SelectBuilder<T>;
}

function select<T extends TableName>(table: T): () => SelectBuilder<T> {
  return function () {
    const statement: Statement = {
      "columns": [],
      "from": [{ "type": "table", "name": { "name": table } }],
      "type": "select",
    };
    const seedBuilder = {
      statement,
      table: table,
      toSql: () => toSql.statement(statement),
    };

    return addUnique<T>(addWhere<T>(addSelectReturning<T>(seedBuilder)));
  };
}

export { insert, insertWith, select, update, upsert };
export type { InsertBuilder, SeedBuilder, SelectBuilder, StatementBuilder };
